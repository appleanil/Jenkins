"Groovy script" PIPELINE CONCEPT
================
1. Basic syntax:
============
node {
    stage('stage one') {
        sh 'echo "Hello one"'
    }
    stage ('stage two'){
        sh 'echo "Hello two"'
    }
    stage ('stage three') {
        sh 'echo "Hello three"'
    }
}


2. Apply in job by PIPELINE  by Git   
===========================

node {
    stage ('Git check-out') {
        //echo "we can write anuthing to meaningful message its optional"
        goto pipeline syntax-->select snippet generator-->paste git url-->copy the URL and paste in this line
    }  //stage ending
} //for the best practices add node ending


3. Apply in job by PIPELINE  by MAVEN
====================================
node {
    // /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven-3.9.9/bin
    //before MAVEN BUILD U MUST ADD STAGE ONE IS GIT CHECK-OUT
   def mavenHome=tool name: "maven-3.9.9"
    stage ('Maven Build') {
        //echo "we can write anuthing to meaningful message its optional"
        sh "${mavenHome}/bin/mvn clean package"
    }  //stage ending
} //for the best practices add node ending



4. Apply in job by PIPELINE  by SonarQube
========================================
//before sonarqube U MUST ADD STAGE ONE IS GIT CHECK-OUT, MAVEN BUILD
node {
    stage('SonarQube Report') {
    //echo "we can write anuthing to meaningful message its optional"
    sh "${mavenHome}/bin/mvn sonar:sonar"
  }
}

5. Apply in job by PIPELINE  by TOMCAT
======================================
//before sonarqube U MUST ADD STAGE ONE IS GIT CHECK-OUT, MAVEN BUILD, SONARQUBE REPORT
node
 stage('Deploy to Tomcat')  {
//echo "we can write anuthing to meaningful message its optional"
      sh """
 curl -u admin:apple \
--upload-file /var/lib/jenkins/workspace/jio-scripted-way-PL/target/maven-web-application.war \
"http://3.109.2.100:9090/manager/text/deploy?path=/maven-web-application&update=true"
           """
    }
}


6. Apply in job by PIPELINE  by NEXUS
=====================================
//before sonarqube U MUST ADD STAGE ONE IS GIT CHECK-OUT, MAVEN BUILD, SONARQUBE REPORT, DEPLOY TO TOMCAT
node {
 stage('BACKUP TO NEXUS') {
    //echo "we can write anuthing to meaningful message its optional"
     sh "${mavenHome}/bin/mvn clean deploy"
  }
}






Blog url:

https://blog.kkdevops.com/jenkins-scripted-pipeline-a-complete-step-by-step-guide-for-real-ci-cd/


node
{

   echo "git branch name: ${env.BRANCH_NAME}"
   echo "build number is: ${env.BUILD_NUMBER}"
   echo "node name is: ${env.NODE_NAME}"


   // /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven-3.9.9/bin
   def mavenHome=tool name: "maven-3.9.9"
    try
    {

  stage('git checkout')
  {
    notifyBuild('STARTED')
    git branch: 'development', url: 'https://github.com/kkdevopsb5/maven-webapplication-project-kkfunda.git'
  } 

    stage('COMPILE')
  {
    sh "${mavenHome}/bin/mvn clean compile"
  }

  stage('Build')
  {
    sh "${mavenHome}/bin/mvn clean package"
  }

    stage('SQ Report')
  {
    sh "${mavenHome}/bin/mvn sonar:sonar"
  }

      stage('Upload Artifact')
  {

    sh "${mavenHome}/bin/mvn clean deploy"
  }

    stage('Deploy to Tomcat') 
    {
      
      sh """

      curl -u kk:password \
--upload-file /var/lib/jenkins/workspace/jio-scripted-way-PL/target/maven-web-application.war \
"http://3.109.2.100:9090/manager/text/deploy?path=/maven-web-application&update=true"
          
        """
    }

    }  //try ending

    catch (e) {
   
       currentBuild.result = "FAILED"

  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
  
} // node ending


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: '#jio-devteam')
  slackSend (color: colorCode, message: summary, channel: '#jio-devops')
}


